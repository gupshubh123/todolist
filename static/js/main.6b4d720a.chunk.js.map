{"version":3,"sources":["components/todolist.js","components/filterlist.js","components/emptylist.js","App.js","serviceWorker.js","index.js","assets/images/empty_list.png"],"names":["Todolist","props","filterByTags","filters","hasFilters","length","itemsListPending","map","item","index","hasAllHashTags","forEach","hashTag","indexOf","className","key","onClick","markCompleted","dangerouslySetInnerHTML","__html","reverse","itemsListCompleted","Number","Filterlist","filterList","EmptyList","src","EmptyListIcon","alt","App","resetListHandler","setState","listPending","listCompleted","tagList","saveStateLocal","resetTagFilters","highlightHashTags","s","reg","RegExp","replace","str","addTodoItemHandler","e","target","value","templist","state","push","todoList","localStorage","setItem","JSON","stringify","markItemCompletedHandler","todoPendingList","todoCompletedList","itemToBeMarkedCompleted","splice","hashTagClicked","component_this","hashTagLinks","document","querySelectorAll","i","addEventListener","event","currentTagList","this","innerText","Array","from","Set","stopPropagation","componentDidUpdate","componentDidMount","getItem","parse","Fragment","id","type","placeholder","onKeyDown","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.6b4d720a.chunk.js","sourcesContent":["import React from 'react'\r\n/*\r\n    Acccepts Pending and Completed task items. Filters, if applied , only renders the filtered list.\r\n    Pending Task list is shown in reverse order as per the requirement.\r\n\r\n*/\r\nconst Todolist=(props) =>{\r\n    let filterByTags=props.filters\r\n    let hasFilters = filterByTags.length?true:false\r\n    let itemsListPending = props.itemsListPending.map((item,index)=>{\r\n        if(hasFilters){\r\n            let hasAllHashTags=true\r\n            filterByTags.forEach((hashTag)=>{\r\n                if(item.indexOf(hashTag) === -1){\r\n                    hasAllHashTags =false\r\n                }\r\n            })\r\n            if(hasAllHashTags){\r\n                return(<li className=\"list-group-item todo_item_pending\" key={index} onClick={()=>{props.markCompleted(index)}} dangerouslySetInnerHTML={{__html: item}}></li>)\r\n            }else{\r\n                return null\r\n            }\r\n        }\r\n        return(<li className=\"list-group-item todo_item_pending\" key={index} onClick={()=>{props.markCompleted(index)}} dangerouslySetInnerHTML={{__html: item}}></li>)\r\n        \r\n    }).reverse()\r\n    let itemsListCompleted = props.itemsListCompleted.map((item,index)=>{\r\n        if(hasFilters){\r\n            let hasAllHashTags=true\r\n            filterByTags.forEach((hashTag)=>{\r\n                if(item.indexOf(hashTag) === -1){\r\n                    hasAllHashTags =false\r\n                }\r\n            })\r\n            if(hasAllHashTags){\r\n                return(<li className=\"list-group-item todo_item_completed\" key={index} dangerouslySetInnerHTML={{__html: item}}></li>)\r\n            }else{\r\n                return null\r\n            }\r\n        }\r\n        return(<li className=\"list-group-item todo_item_completed\" key={index} dangerouslySetInnerHTML={{__html: item}}></li>)\r\n    })\r\n    return (\r\n        <div className=\"render_list\">\r\n            <div className=\"task_list_stats\">\r\n                <div className=\"stat all_tasks\">\r\n                    {'All: '+Number(itemsListPending.length+itemsListCompleted.length)}\r\n                </div>\r\n                <div className=\"stat pending_tasks\">\r\n                    {'Pending: '+itemsListPending.length}\r\n                </div>\r\n                <div className=\"stat completed_tasks\">\r\n                    {'Completed: '+itemsListCompleted.length}\r\n                </div>\r\n            </div>\r\n            <ul className=\"list-group render_list_ul\">\r\n                {itemsListPending}\r\n                {itemsListCompleted}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todolist\r\n","import React from 'react'\r\n/*\r\nShows filters in the form of tags\r\n*/\r\nconst Filterlist=(props)=> {\r\n    let filterList = props.filters\r\n    return (\r\n        <div className=\"row tag_filter_ctn\">\r\n            Filter by :\r\n          {filterList.map((item,index)=>{\r\n            return (<div className=\"tag\" key={index}>{item}</div>)\r\n          })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filterlist\r\n","import React from 'react'\r\nimport EmptyListIcon from '../assets/images/empty_list.png'\r\n\r\nfunction EmptyList() {\r\n    return (\r\n        <div className=\"empty_list_container flexContainer\">\r\n            <img src={EmptyListIcon} alt=\"Empty list\" />\r\n            <div className=\"empty_list_text\">\r\n                No tasks for display\r\n                <ul>\r\n                    <li>Add tasks</li>\r\n                    <li> Use <i>#hashtag(s)</i> in your tasks </li>\r\n                    <li> Click <i>#hashtag(s)</i> to filter the tasks</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmptyList\r\n","import React, { Component } from 'react'\nimport Todolist from './components/todolist'\nimport Filterlist from './components/filterlist'\nimport './App.css';\nimport EmptyList from './components/emptylist';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      listPending:localStorage.getItem(\"todoList\")?(JSON.parse(localStorage.getItem(\"todoList\")).listPending):[],\n      listCompleted:localStorage.getItem(\"todoList\")?(JSON.parse(localStorage.getItem(\"todoList\")).listCompleted):[],\n      tagList:[]\n    }\n  }\n  resetListHandler=()=>{\n     // resets the complete list\n    this.setState({listPending:[],listCompleted:[],tagList:[]},()=>{\n      this.saveStateLocal()  \n    })\n  }\n  resetTagFilters=()=>{\n    //resets the hashtag filters appplied\n    this.setState({tagList:[]},()=>{})\n  }\n\n  highlightHashTags=(s)=>{\n    //macthes the pattern for #hashtag and replaces it with span\n    let reg = new RegExp(/(^|\\B)#(?![0-9_]+\\b)([a-zA-Z0-9_]{1,30})(\\b|\\r)/, 'gi')\n     return s.replace(reg, (str) =>'<span class=\"highlight_hashtag\">'+str+'</span>')\n  }\n  addTodoItemHandler=(e)=>{\n    //adds a new pending item to list, saves in localstorage\n    if (e.key === 'Enter' && e.target.value.length) {\n      let item = this.highlightHashTags(e.target.value)\n      let templist = [...this.state.listPending]\n      templist.push(item)\n      this.setState({listPending:templist},()=>{\n        this.resetTagFilters()\n        this.saveStateLocal()  \n      })\n      e.target.value=\"\"\n    }\n  }\n  saveStateLocal=(state)=>{\n    //saves the list items in local storage\n    let todoList={\n      listPending:this.state.listPending,\n      listCompleted:this.state.listCompleted\n    }\n    localStorage.setItem(\"todoList\",JSON.stringify(todoList));\n  }\n  markItemCompletedHandler=(index)=>{\n    //removes the items from the pending list, moves to completed\n    let todoPendingList = [...this.state.listPending]\n    let todoCompletedList = [...this.state.listCompleted]\n    let itemToBeMarkedCompleted = todoPendingList[index]\n    todoPendingList.splice(index,1)\n    todoCompletedList.push(itemToBeMarkedCompleted)\n    this.setState({listPending:todoPendingList,listCompleted:todoCompletedList},()=>{\n      this.saveStateLocal()\n    })\n    \n  }\n  render() {\n    return (\n      <React.Fragment>\n        <header className=\"page_header\">\n            TODO\n        </header>\n        <main  className=\"container todo_container\">\n        \n            <div className=\"row add_todo\">\n              <div className=\"input-group mb-3 col-sm-12 col-xs-12 col-md-8\">\n                  <div className=\"input-group-prepend\">\n                    <span className=\"input-group-text\" id=\"basic-addon1\">Add Task</span>\n                  </div>\n                  <input type=\"text\" className=\"form-control\" placeholder=\"Enter text with hashtag(s)\" onKeyDown={this.addTodoItemHandler}/>\n              </div>\n              <div className=\"col-sm-12 col-xs-12 col-md-4\">\n                  <button onClick={this.resetListHandler} className=\"btn custom_btn_reset\">Reset list</button>\n                  <button onClick={this.resetTagFilters} className=\"btn custom_btn_reset\">Reset Filters</button>\n              </div>\n            </div> \n            {this.state.tagList.length?<Filterlist filters={this.state.tagList}/>:null}\n            {this.state.listPending.length===0 && this.state.listCompleted.length ===0?\n            <EmptyList/>\n            :<Todolist \n            itemsListPending={this.state.listPending} \n            itemsListCompleted={this.state.listCompleted}\n            markCompleted={this.markItemCompletedHandler}\n            filters={this.state.tagList}\n            />}\n            \n      </main>\n    </React.Fragment>\n    )\n  }\n  hashTagClicked=()=>{\n    //adding event listners to span hashtags\n    let component_this = this\n    var hashTagLinks = document.querySelectorAll('.highlight_hashtag')\n    for (let i = 0; i < hashTagLinks.length; i++) {\n      hashTagLinks[i].addEventListener('click', function(event) { \n        let currentTagList = [...component_this.state.tagList]\n        currentTagList.push(this.innerText)\n        component_this.setState({tagList:Array.from(new Set(currentTagList))})\n        event.stopPropagation()\n      });\n    }   \n  }\n  componentDidUpdate=()=>{\n    this.hashTagClicked()\n  }\n  componentDidMount=()=>{\n     this.hashTagClicked()\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/empty_list.080d0fda.png\";"],"sourceRoot":""}